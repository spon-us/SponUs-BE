name: Java CI/CD with Gradle

on:
  pull_request:
    branches: ["develop"]
  push:
    branches: ["develop"]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:

          java-version: '17'
          distribution: 'temurin'

      - name: 2) Convert to prod config
        run: |
          cd ./src/main/resources
          [ -e "application.yml" ] && rm application.yml
          echo "spring:" > application.yml
          echo "  profiles:" >> application.yml
          echo "    active: prod" >> application.yml

      # - name: 3) Set prod.yml
      #   uses: microsoft/variable-substitution@v1
      #   with:
      #     files: ./src/main/resources/application-prod.yml
      #   env:
      #     spring.datasource.url: ${{ secrets.DB_URL }} 
      #     spring.datasource.username: ${{ secrets.DB_USERNAME }} 
      #     spring.datasource.password: ${{ secrets.DB_PW }}
      #     spring.jwt.secret: ${{ secrets.JWT_SECRET }}
      #     spring.jwt.token.access-expiration-time: ${{ secrets.JWT_ACCESS_EXPIRATION_TIME }}
      #     spring.jwt.token.refresh-expiration-time: ${{ secrets.JWT_REFRESH_EXPIRATION_TIME }}
      #     spring.data.redis.host: ${{ secrets.REDIS_HOST }}
      #     spring.data.redis.port: ${{ secrets.REDIS_PORT }}
      - name: 3) Set prod.yml
        run: |
          sed -i "s|{{DB_URL}}|${{ secrets.DB_URL }}|" ./src/main/resources/application-prod.yml
          sed -i "s|{{DB_USERNAME}}|${{ secrets.DB_USERNAME }}|" ./src/main/resources/application-prod.yml
          sed -i "s|{{DB_PW}}|${{ secrets.DB_PW }}|" ./src/main/resources/application-prod.yml
          sed -i "s|{{JWT_SECRET}}|${{ secrets.JWT_SECRET }}|" ./src/main/resources/application-prod.yml
          sed -i "s|{{JWT_ACCESS_EXPIRATION_TIME}}|${{ secrets.JWT_ACCESS_EXPIRATION_TIME }}|" ./src/main/resources/application-prod.yml
          sed -i "s|{{JWT_REFRESH_EXPIRATION_TIME}}|${{ secrets.JWT_REFRESH_EXPIRATION_TIME }}|" ./src/main/resources/application-prod.yml
          sed -i "s|{{REDIS_HOST}}|${{ secrets.REDIS_HOST }}|" ./src/main/resources/application-prod.yml
          sed -i "s|{{REDIS_PORT}}|${{ secrets.REDIS_PORT }}|" ./src/main/resources/application-prod.yml

      - name: Grant execute permission for gradlew and build
        run: |
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew build -x test

  cd:
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew and build
        run: |
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew build -x test

      # Docker image Build (1)
      - name: Docker image build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/sponus-docker --pull --no-cache --platform linux/amd64 .

      # DockerHub Login (2)
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Hub push (3)
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/sponus-docker

      # AWS EC2 Server Connect & Docker command execution
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }} # EC2 instance public DNS
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }} # pem key
          script: |
            sudo docker stop sponus-docker
            sudo docker rm sponus-docker
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/sponus-docker
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/sponus-docker

            sudo docker stop my-redis
            sudo docker rm my-redis
            sudo docker rmi redis

            sudo docker pull redis
            sudo docker network create my-network
            sudo docker run --name my-redis --network my-network -d redis
            sudo docker run -e SPRING_PROFILES_ACTIVE=prod -it -d -p 8080:8080 --name sponus-docker -e TZ=Asia/Seoul --network my-network ${{ secrets.DOCKER_USERNAME }}/sponus-docker

