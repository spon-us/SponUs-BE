name: Java CI with Gradle

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:

          java-version: '17'
          distribution: 'temurin'

      - name: 1) Convert to prod config
        run: |
          cd ./api/src/main/resources
          [ -e "application.yml" ] && rm application.yml
          echo "spring:" > application.yml
          echo "  profiles:" >> application.yml
          echo "    group:" >> application.yml
          echo "      "local": "db, s3, email, secret"" >> application.yml
          echo "      "prod": "db, s3, redis, email"" >> application.yml
          echo "    default: prod" >> application.yml
          
          echo "  servlet:" >> application.yml
          echo "    multipart:" >> application.yml
          echo "      max-file-size: 20MB" >> application.yml
          echo "      max-request-size: 20MB" >> application.yml


      - name: 2) Set FCM
        env:
          DATA: ${{ secrets.FIREBASE_KEY }}
        run: |
          mkdir -p ./api/src/main/resources/firebase
          echo $DATA > ./api/src/main/resources/firebase/firebase-key.json

      - name: 3) Set prod.yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./api/src/main/resources/application-prod.yml
        env:
          spring.jwt.secret: ${{ secrets.JWT_SECRET }}
          spring.jwt.token.access-expiration-time: ${{ secrets.JWT_ACCESS_EXPIRATION_TIME }}
          spring.jwt.token.refresh-expiration-time: ${{ secrets.JWT_REFRESH_EXPIRATION_TIME }}
          firebase.fcmUrl: ${{ secrets.FIREBASE_URL}}
          firebase.firebaseConfigPath: ${{ secrets.FIREBASE_PATH}}
          PORT_ONE_KEY: ${{ secrets.PORT_ONE_KEY}}
          PORT_ONE_SECRET: ${{ secrets.PORT_ONE_SECRET}}

      - name: 4) Set application-db.yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./core/core-infra-db/src/main/resources/application-db.yml
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PW }}

      - name: 5) Set application-s3.yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./core/core-infra-s3/src/main/resources/application-s3.yml
        env:
          cloud.aws.s3.bucket: ${{ secrets.BUCKET }}
          cloud.aws.region.static: ${{ secrets.REGION }}
          cloud.aws.credentials.accessKey: ${{ secrets.S3_ACCESS_KEY }}
          cloud.aws.credentials.secretKey: ${{ secrets.S3_SECRET_KEY }}

      - name: 6) Set application-redis.yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./core/core-infra-redis/src/main/resources/application-redis.yml
        env:
          spring.data.redis.host: ${{ secrets.REDIS_HOST }}
          spring.data.redis.port: ${{ secrets.REDIS_PORT }}

      - name: 7) Set application-email.yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./core/core-infra-email/src/main/resources/application-email.yml
        env:
          mail.smtp.port: ${{ secrets.EMAIL_PORT }}
          AdminMail.id: ${{ secrets.EMAIL_ID }}
          AdminMail.password: ${{ secrets.EMAIL_PASSWORD }}

      - name: Grant execute permission for gradlew and build
        run: |
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew build -x test

      # Docker image Build (1)
      - name: Docker image build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/sponus-docker --pull --no-cache --platform linux/amd64 .

      # DockerHub Login (2)
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Hub push (3)
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/sponus-docker
